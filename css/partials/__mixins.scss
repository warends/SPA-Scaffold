// MIXIN: Animations
@mixin transform($rot, $scale1, $scale2) {
  -webkit-transform: rotate($rot) scale($scale1, $scale2);
      -ms-transform: rotate($rot) scale($scale1, $scale2);
          transform: rotate($rot) scale($scale1, $scale2);
}

@mixin keyframeAnimation($name, $duration, $count, $function) {
  -moz-animation: $name, $duration, $count, $function;
  -webkit-animation: $name, $duration, $count, $function;
  -ms-animation: $name, $duration, $count, $function;
  -o-animation: $name, $duration, $count, $function;
  animation: $name, $duration, $count, $function;
}

// MIXIN: Transition
@mixin transition($property, $duration, $timing-function, $delay) {
  -webkit-transition: $property $duration $timing-function $delay;
  -moz-transition: $property $duration $timing-function $delay;
  -o-transition: $property $duration $timing-function $delay;
  transition: $property $duration $timing-function $delay;
}

@mixin simpleTransition($transition...) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

// MIXIN: Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// MIXIN: Box Shadow
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

// MIXIN: Opacity
@mixin opacity($trans) {
  filter: alpha(opactiy=($trans * 100));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

// MIXIN: Transform
@mixin transform($rot, $scale1, $scale2) {
  -webkit-transform: rotate($rot) scale($scale1, $scale2);
     -moz-transform: rotate($rot) scale($scale1, $scale2);
       -o-transform: rotate($rot) scale($scale1, $scale2);
      -ms-transform: rotate($rot) scale($scale1, $scale2);
          transform: rotate($rot) scale($scale1, $scale2);
}

// MIXIN: Transform: Scale
@mixin transform($scale1, $scale2) {
  -webkit-transform: scale($scale1, $scale2);
     -moz-transform: scale($scale1, $scale2);
       -o-transform: scale($scale1, $scale2);
      -ms-transform: scale($scale1, $scale2);
          transform: scale($scale1, $scale2);
}


// MIXIN: Transform Rotate
@mixin rotate($rot) {
  -webkit-transform: rotate($rot);
     -moz-transform: rotate($rot);
       -o-transform: rotate($rot);
      -ms-transform: rotate($rot);
          transform: rotate($rot);
}

/*** MIXIN: Flexbox ************************************************************/
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin flex-direction($value: row) { /* !row! | row-reverse | column | column-reverse */
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) { /* !nowrap! | wrap | wrap-reverse */
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) { /* Combination of flex-direction AND flex-wrap, default is row AND nowrap */
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin justify-content($value: flex-start) { /* !flex-start!, flex-end, center, space-between, space-around */
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {  /* flex-start, flex-end, center, baseline, !stretch! */
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) { /* !auto! | flex-start | flex-end | center | baseline | stretch */
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: stretch) { /* flex-start | flex-end | center | space-between | space-around | !stretch! */
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}


/* Vertical Align Mixin */
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}


/* Clearfix */
.clearfix {
  display:block;
  clear:both;
}

//   Media Queries
//   EXAMPLE: use the large breakpoint media query
//     @include mq($L) {}
@mixin mq($media-query) {
  @media ($media-query) { @content; }
}
